// developer.android.com/studio/build/dependencies#view-dependency-tree
// developer.android.com/studio/build/dependencies#resolution_errors
// developer.android.com/studio/build/dependencies#duplicate_classes

debugRuntimeClasspath - Dependencies for runtime/packaging
+--- :mylibrary (variant: debug)
+--- com.google.android.material:material:1.0.0@aar
+--- androidx.appcompat:appcompat:1.0.2@aar
+--- androidx.constraintlayout:constraintlayout:1.1.3@aar
+--- androidx.fragment:fragment:1.0.0@aar
+--- androidx.vectordrawable:vectordrawable-animated:1.0.0@aar
+--- androidx.recyclerview:recyclerview:1.0.0@aar
+--- androidx.legacy:legacy-support-core-ui:1.0.0@aar
...

debugAndroidTest
debugAndroidTestCompileClasspath - Dependencies for compilation
+--- androidx.test.ext:junit:1.1.0@aar
+--- androidx.test.espresso:espresso-core:3.1.1@aar
+--- androidx.test:runner:1.1.1@aar
+--- junit:junit:4.12@jar
...

//**
If you can't easily identify the duplicate dependency, try using Android Studio's UI to search for dependencies that include the duplicate class as follows:
Select Navigate > Class from the menu bar.
In the pop-up search dialog, make sure that the box next to Include non-project items is checked.
Type the name of the class that appears in the build error.
Inspect the results for the dependencies that include the class.
The following sections describe the different types of dependency resolution errors you may encounter and how to fix them.
**//

Program type already present com.example.MyClass

//**
A binary dependency includes a library that your app also includes as a direct dependency. For example, your app declares a direct dependency on Library A and Library B, but Library A already includes Library B in its binary.
To resolve this issue, remove Library B as a direct dependency.
Your app has a local binary dependency and a remote binary dependency on the same library.
To resolve this issue, remove one of the binary dependencies.
**//

// developer.android.com/studio/build/dependencies#classpath_conflicts
https://developer.android.com/studio/images/build/classpath_sync-2x.png

Conflict with dependency 'com.example.library:some-lib:2.0' in project 'my-library'.
Resolved versions for runtime classpath (1.0) and compile classpath (2.0) differ.

// developer.android.com/studio/build/dependencies#build_logic
//**
A library can have functionalities that other projects or sub-projects might want to use. 
Publishing a library is the process by which the library is made available to its consumers. 
Libraries can control which dependencies its consumers have access to at compile time and runtime.
There are two separate configurations that hold the transitive dependencies of each classpath which must be used by consumers to consume the library as described below:
variant_nameApiElements: This configuration holds the transitive dependencies that are available to consumers at compile time.
variant_nameRuntimeElements: This configuration holds the transitive dependencies that are available to consumers at runtime.
To learn more about the relationships between the different configurations, go to The Java Library plugin configurations.
**//

// developer.android.com/studio/build/dependencies#custom_dep_resolutions

//**
To resolve this conflict, the Android Gradle Plugin uses the following dependency resolution strategy: when the plugin detects that different versions of the same module are in the dependency graph, by default, it chooses the one with the highest version number.

However, this strategy might not always work as you intend. To customize the dependency resolution strategy, use the following configurations to resolve specific dependencies of a variant that are needed for your task:

variant_nameCompileClasspath: This configuration contains the resolution strategy for a given variant’s compile classpath.
variant_nameRuntimeClasspath: This configuration contains the resolution strategy for a given variant’s runtime classpath.
The Android Gradle plugin includes getters that you can use to access the configuration objects of each variant. Thus, you can use the variant API to query the dependency resolution as shown in the example below:
**//
android {
    applicationVariants.all { variant ->
        // Return compile configuration objects of a variant.
        variant.getCompileConfiguration().resolutionStrategy {
        // Use Gradle's ResolutionStrategy API
        // to customize how this variant resolves dependencies.
            ...
        }
        // Return runtime configuration objects of a variant.
        variant.getRuntimeConfiguration().resolutionStrategy {
            ...
        }
        // Return annotation processor configuration of a variant.
        variant.getAnnotationProcessorConfiguration().resolutionStrategy {
            ...
        }
    }
}
